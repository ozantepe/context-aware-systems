/* RuleCompilerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. RuleCompilerTokenManager.java */
package com.rules.rulecompiler.generated;

/**
 * Token Manager.
 */
@SuppressWarnings("unused")
public class RuleCompilerTokenManager implements RuleCompilerConstants {
   private static StringBuilder debugSb = null;

   public static void enableDebugStrings() {
      debugSb = new StringBuilder();
   }

   public static String getDebugString() {
      if (debugSb == null)
         return "";

      String debugOutput = debugSb.toString();
      debugSb.setLength(0);
      return debugOutput;
   }

   private static void debugAppend(String _msg) {
      if (debugSb != null) {
         debugSb.append(_msg);
      }
   }

   /**
    * Debug output.
    */
   public java.io.PrintStream debugStream = System.out;

   /**
    * Set debug output.
    */
   public void setDebugStream(java.io.PrintStream ds) {
      debugStream = ds;
   }

   private final int jjStopStringLiteralDfa_0(int pos, long active0) {
      switch (pos) {
         default:
            return -1;
      }
   }

   private final int jjStartNfa_0(int pos, long active0) {
      return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
   }

   private int jjStopAtPos(int pos, int kind) {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      return pos + 1;
   }

   private int jjMoveStringLiteralDfa0_0() {
      switch (curChar) {
         case 60:
            return jjStopAtPos(0, 8);
         case 61:
            return jjStopAtPos(0, 7);
         case 62:
            return jjStopAtPos(0, 9);
         case 99:
            return jjMoveStringLiteralDfa1_0(0x1c00L);
         default:
            return jjMoveNfa_0(0, 0);
      }
   }

   private int jjMoveStringLiteralDfa1_0(long active0) {
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(0, active0);
         return 1;
      }
      switch (curChar) {
         case 117:
            return jjMoveStringLiteralDfa2_0(active0, 0x1c00L);
         default:
            break;
      }
      return jjStartNfa_0(0, active0);
   }

   private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(0, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(1, active0);
         return 2;
      }
      switch (curChar) {
         case 114:
            return jjMoveStringLiteralDfa3_0(active0, 0x1c00L);
         default:
            break;
      }
      return jjStartNfa_0(1, active0);
   }

   private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(1, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(2, active0);
         return 3;
      }
      switch (curChar) {
         case 114:
            return jjMoveStringLiteralDfa4_0(active0, 0x1c00L);
         default:
            break;
      }
      return jjStartNfa_0(2, active0);
   }

   private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(2, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(3, active0);
         return 4;
      }
      switch (curChar) {
         case 101:
            return jjMoveStringLiteralDfa5_0(active0, 0x1c00L);
         default:
            break;
      }
      return jjStartNfa_0(3, active0);
   }

   private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(3, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(4, active0);
         return 5;
      }
      switch (curChar) {
         case 110:
            return jjMoveStringLiteralDfa6_0(active0, 0x1c00L);
         default:
            break;
      }
      return jjStartNfa_0(4, active0);
   }

   private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(4, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(5, active0);
         return 6;
      }
      switch (curChar) {
         case 116:
            return jjMoveStringLiteralDfa7_0(active0, 0x1c00L);
         default:
            break;
      }
      return jjStartNfa_0(5, active0);
   }

   private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(5, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(6, active0);
         return 7;
      }
      switch (curChar) {
         case 95:
            return jjMoveStringLiteralDfa8_0(active0, 0x1c00L);
         default:
            break;
      }
      return jjStartNfa_0(6, active0);
   }

   private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(6, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(7, active0);
         return 8;
      }
      switch (curChar) {
         case 102:
            return jjMoveStringLiteralDfa9_0(active0, 0x800L);
         case 116:
            return jjMoveStringLiteralDfa9_0(active0, 0x1400L);
         default:
            break;
      }
      return jjStartNfa_0(7, active0);
   }

   private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(7, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(8, active0);
         return 9;
      }
      switch (curChar) {
         case 101:
            return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
         case 105:
            return jjMoveStringLiteralDfa10_0(active0, 0x400L);
         case 117:
            return jjMoveStringLiteralDfa10_0(active0, 0x800L);
         default:
            break;
      }
      return jjStartNfa_0(8, active0);
   }

   private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(8, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(9, active0);
         return 10;
      }
      switch (curChar) {
         case 101:
            return jjMoveStringLiteralDfa11_0(active0, 0x800L);
         case 109:
            return jjMoveStringLiteralDfa11_0(active0, 0x1400L);
         default:
            break;
      }
      return jjStartNfa_0(9, active0);
   }

   private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(9, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(10, active0);
         return 11;
      }
      switch (curChar) {
         case 101:
            if ((active0 & 0x400L) != 0L)
               return jjStopAtPos(11, 10);
            break;
         case 108:
            return jjMoveStringLiteralDfa12_0(active0, 0x800L);
         case 112:
            if ((active0 & 0x1000L) != 0L)
               return jjStopAtPos(11, 12);
            break;
         default:
            break;
      }
      return jjStartNfa_0(10, active0);
   }

   private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(10, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(11, active0);
         return 12;
      }
      switch (curChar) {
         case 95:
            return jjMoveStringLiteralDfa13_0(active0, 0x800L);
         default:
            break;
      }
      return jjStartNfa_0(11, active0);
   }

   private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(11, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(12, active0);
         return 13;
      }
      switch (curChar) {
         case 115:
            return jjMoveStringLiteralDfa14_0(active0, 0x800L);
         default:
            break;
      }
      return jjStartNfa_0(12, active0);
   }

   private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(12, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(13, active0);
         return 14;
      }
      switch (curChar) {
         case 116:
            return jjMoveStringLiteralDfa15_0(active0, 0x800L);
         default:
            break;
      }
      return jjStartNfa_0(13, active0);
   }

   private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(13, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(14, active0);
         return 15;
      }
      switch (curChar) {
         case 97:
            return jjMoveStringLiteralDfa16_0(active0, 0x800L);
         default:
            break;
      }
      return jjStartNfa_0(14, active0);
   }

   private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(14, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(15, active0);
         return 16;
      }
      switch (curChar) {
         case 116:
            return jjMoveStringLiteralDfa17_0(active0, 0x800L);
         default:
            break;
      }
      return jjStartNfa_0(15, active0);
   }

   private int jjMoveStringLiteralDfa17_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(15, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(16, active0);
         return 17;
      }
      switch (curChar) {
         case 117:
            return jjMoveStringLiteralDfa18_0(active0, 0x800L);
         default:
            break;
      }
      return jjStartNfa_0(16, active0);
   }

   private int jjMoveStringLiteralDfa18_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(16, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(17, active0);
         return 18;
      }
      switch (curChar) {
         case 115:
            if ((active0 & 0x800L) != 0L)
               return jjStopAtPos(18, 11);
            break;
         default:
            break;
      }
      return jjStartNfa_0(17, active0);
   }

   private int jjMoveNfa_0(int startState, int curPos) {
      int startsAt = 0;
      jjnewStateCnt = 11;
      int i = 1;
      jjstateSet[0] = startState;
      int kind = 0x7fffffff;
      for (; ; ) {
         if (++jjround == 0x7fffffff)
            ReInitRounds();
         if (curChar < 64) {
            long l = 1L << curChar;
            do {
               switch (jjstateSet[--i]) {
                  case 0:
                     if ((0x3fe000000000000L & l) != 0L) {
                        if (kind > 5)
                           kind = 5;
                        {
                           jjCheckNAdd(1);
                        }
                     } else if (curChar == 48) {
                        if (kind > 5)
                           kind = 5;
                     }
                     break;
                  case 1:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 5)
                        kind = 5;
                  {
                     jjCheckNAdd(1);
                  }
                  break;
                  case 2:
                     if (curChar == 48 && kind > 5)
                        kind = 5;
                     break;
                  default:
                     break;
               }
            } while (i != startsAt);
         } else if (curChar < 128) {
            long l = 1L << (curChar & 077);
            do {
               switch (jjstateSet[--i]) {
                  case 0:
                     if (curChar == 78)
                        jjstateSet[jjnewStateCnt++] = 9;
                     else if (curChar == 68)
                        jjstateSet[jjnewStateCnt++] = 4;
                     break;
                  case 3:
                     if (curChar == 121)
                        kind = 6;
                     break;
                  case 4:
                     if (curChar == 97)
                        jjstateSet[jjnewStateCnt++] = 3;
                     break;
                  case 5:
                     if (curChar == 68)
                        jjstateSet[jjnewStateCnt++] = 4;
                     break;
                  case 6:
                     if (curChar == 116)
                        kind = 6;
                     break;
                  case 7:
                     if (curChar == 104)
                        jjstateSet[jjnewStateCnt++] = 6;
                     break;
                  case 8:
                     if (curChar == 103)
                        jjstateSet[jjnewStateCnt++] = 7;
                     break;
                  case 9:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 8;
                     break;
                  case 10:
                     if (curChar == 78)
                        jjstateSet[jjnewStateCnt++] = 9;
                     break;
                  default:
                     break;
               }
            } while (i != startsAt);
         } else {
            int i2 = (curChar & 0xff) >> 6;
            long l2 = 1L << (curChar & 077);
            do {
               switch (jjstateSet[--i]) {
                  default:
                     break;
               }
            } while (i != startsAt);
         }
         if (kind != 0x7fffffff) {
            jjmatchedKind = kind;
            jjmatchedPos = curPos;
            kind = 0x7fffffff;
         }
         ++curPos;
         if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
            return curPos;
         try {
            curChar = input_stream.readChar();
         } catch (java.io.IOException e) {
            return curPos;
         }
      }
   }

   static final int[] jjnextStates = {
   };

   /**
    * Token literal values.
    */
   public static final String[] jjstrLiteralImages = {
           "", null, null, null, null, null, null, "\75", "\74", "\76",
           "\143\165\162\162\145\156\164\137\164\151\155\145",
           "\143\165\162\162\145\156\164\137\146\165\145\154\137\163\164\141\164\165\163", "\143\165\162\162\145\156\164\137\164\145\155\160",};

   protected Token jjFillToken() {
      final Token t;
      final String curTokenImage;
      final int beginLine;
      final int endLine;
      final int beginColumn;
      final int endColumn;
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
      t = Token.newToken(jjmatchedKind, curTokenImage);

      t.beginLine = beginLine;
      t.endLine = endLine;
      t.beginColumn = beginColumn;
      t.endColumn = endColumn;

      return t;
   }

   int curLexState = 0;
   int defaultLexState = 0;
   int jjnewStateCnt;
   int jjround;
   int jjmatchedPos;
   int jjmatchedKind;

   /**
    * Get the next Token.
    */
   public Token getNextToken() {
      Token matchedToken;
      int curPos = 0;

      EOFLoop:
      for (; ; ) {
         try {
            curChar = input_stream.BeginToken();
         } catch (java.io.IOException e) {
            jjmatchedKind = 0;
            jjmatchedPos = -1;
            matchedToken = jjFillToken();
            return matchedToken;
         }
         image = jjimage;
         image.setLength(0);
         jjimageLen = 0;

         try {
            input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         } catch (java.io.IOException e1) {
            continue EOFLoop;
         }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedKind != 0x7fffffff) {
            if (jjmatchedPos + 1 < curPos)
               input_stream.backup(curPos - jjmatchedPos - 1);
            if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
               matchedToken = jjFillToken();
               TokenLexicalActions(matchedToken);
               return matchedToken;
            } else {
               continue EOFLoop;
            }
         }
         int error_line = input_stream.getEndLine();
         int error_column = input_stream.getEndColumn();
         String error_after = null;
         boolean EOFSeen = false;
         try {
            input_stream.readChar();
            input_stream.backup(1);
         } catch (java.io.IOException e1) {
            EOFSeen = true;
            error_after = curPos <= 1 ? "" : input_stream.GetImage();
            if (curChar == '\n' || curChar == '\r') {
               error_line++;
               error_column = 0;
            } else
               error_column++;
         }
         if (!EOFSeen) {
            input_stream.backup(1);
            error_after = curPos <= 1 ? "" : input_stream.GetImage();
         }
         throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
      }
   }

   void TokenLexicalActions(Token matchedToken) {
      switch (jjmatchedKind) {
         case 5:
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            debugAppend("INT ");
            break;
         case 6:
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            debugAppend("daytime(const) ");
            break;
         case 7:
            image.append(jjstrLiteralImages[7]);
            lengthOfMatch = jjstrLiteralImages[7].length();
            debugAppend("EQUALS ");
            break;
         case 8:
            image.append(jjstrLiteralImages[8]);
            lengthOfMatch = jjstrLiteralImages[8].length();
            debugAppend("LESS ");
            break;
         case 9:
            image.append(jjstrLiteralImages[9]);
            lengthOfMatch = jjstrLiteralImages[9].length();
            debugAppend("GREATER ");
            break;
         case 10:
            image.append(jjstrLiteralImages[10]);
            lengthOfMatch = jjstrLiteralImages[10].length();
            debugAppend("daytime(var) ");
            break;
         case 11:
            image.append(jjstrLiteralImages[11]);
            lengthOfMatch = jjstrLiteralImages[11].length();
            debugAppend("fuel(var) ");
            break;
         case 12:
            image.append(jjstrLiteralImages[12]);
            lengthOfMatch = jjstrLiteralImages[12].length();
            debugAppend("temp(var) ");
            break;
         default:
            break;
      }
   }

   private void jjCheckNAdd(int state) {
      if (jjrounds[state] != jjround) {
         jjstateSet[jjnewStateCnt++] = state;
         jjrounds[state] = jjround;
      }
   }

   private void jjAddStates(int start, int end) {
      do {
         jjstateSet[jjnewStateCnt++] = jjnextStates[start];
      } while (start++ != end);
   }

   private void jjCheckNAddTwoStates(int state1, int state2) {
      jjCheckNAdd(state1);
      jjCheckNAdd(state2);
   }

   /**
    * Constructor.
    */
   public RuleCompilerTokenManager(SimpleCharStream stream) {

      if (SimpleCharStream.staticFlag)
         throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

      input_stream = stream;
   }

   /**
    * Constructor.
    */
   public RuleCompilerTokenManager(SimpleCharStream stream, int lexState) {
      ReInit(stream);
      SwitchTo(lexState);
   }

   /**
    * Reinitialise parser.
    */
   public void ReInit(SimpleCharStream stream) {
      jjmatchedPos = jjnewStateCnt = 0;
      curLexState = defaultLexState;
      input_stream = stream;
      ReInitRounds();
   }

   private void ReInitRounds() {
      int i;
      jjround = 0x80000001;
      for (i = 11; i-- > 0; )
         jjrounds[i] = 0x80000000;
   }

   /**
    * Reinitialise parser.
    */
   public void ReInit(SimpleCharStream stream, int lexState) {
      ReInit(stream);
      SwitchTo(lexState);
   }

   /**
    * Switch to specified lex state.
    */
   public void SwitchTo(int lexState) {
      if (lexState >= 1 || lexState < 0)
         throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
      else
         curLexState = lexState;
   }

   /**
    * Lexer state names.
    */
   public static final String[] lexStateNames = {
           "DEFAULT",
   };
   static final long[] jjtoToken = {
           0x1fe1L,
   };
   static final long[] jjtoSkip = {
           0x1eL,
   };
   protected SimpleCharStream input_stream;

   private final int[] jjrounds = new int[11];
   private final int[] jjstateSet = new int[2 * 11];

   private final StringBuilder jjimage = new StringBuilder();
   private StringBuilder image = jjimage;
   private int jjimageLen;
   private int lengthOfMatch;

   protected char curChar;
}
